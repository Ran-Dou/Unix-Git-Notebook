Learning Sources:
1. [web] https://www.youtube.com/watch?v=IHaTbJPdB-s
2. [book] https://www.git-scm.com/book/en/v2

Open Terminal in Visual Studio Code: Control + Tilde Key

#basic set ups
git --help
git --version
git config --global user.name "Ran-Dou"
git config --global user.email "randou.esther@gmail.com" 
git config --global user.name "Ran-Esther-Dou"
git config --global user.email "randou@brandeis.edu" 
git config --list
git help <verb>
git verb --help 

#create new repository in local and push to remote
mkdir hibernaet-demo2
cd hibernaet-demo2
git init
touch README
git add README
git commit -m 'first commit'
git remote add origin git@github.com:defnngj/hibernaet-demo2.git
git push -u origin master
rm -rf .git             #remove version control from git
touch .gitignore        #can add files we want to ignore, accept wildcard
                        .DS_Store

git clone <url>	<local place>   #clone a repository
git remote -v           #list all remote repositories
git branch -a           #list all branches include remote
git add <filename>      #add file to stage
git add .               #add all the file in the current directory
git add file1 file2     #add multiple files
git add -a              #add everything unstaged/untracked
git reset               #remove files from staging area 
git commit -m "..."     #-m for adding message
git diff                #shows file differences not yet staged
git diff --staged       #shows file differences stagged
git branch              #list of current branches
git branch [branchname] #create new branch
git checkout [branchname]           #Switches to the specified branch and updates the working directory
git checkout -b [branchname]        #create and move to new branch
git pull                            #pull all the changes in the branch you're on
git pull origin master
git push origin master
git push --set-upstream origin testbranch       #push new branch to github
git push -u origin master           #push newly created master repository
git push -u origin testbranch       #push new branch to github
git remote add origin [https url]   #location of remote repository
git merge [branchname]              #will be merged to current (master) branch

#ways to delete branche
$ git branch --merged                 #double checkout
$ git push origin --delete <branch> #delete remote branch 
$ git branch --delete <branch>      #delete local branch
$ git branch -d <branch>            #Shorter version
$ git branch -D <branch>            #Force delete un-merged branches
$ git branch --delete --remotes <remote>/<branch>   #delete a local remote-tracking branch
$ git branch -dr <remote>/<branch>  #Shorter
$ git fetch <remote> --prune        #Delete multiple obsolete tracking branches
$ git fetch <remote> -p #Shorter

#Common Process
git branch [newbranch]
git checkout [newbranch]
git status
git add -A
git commit -m "Some Message"
git push -u origin [newbranch]
git checkout master
git pull origin master
git merge [newbranch] / git rebase    #DIFFERENCE
git push origin master
git push origin --delete [newbranch]

#Create Tags
git checkout [branchname]
git tag v1.0
git tag -a v1.1 -m "tag for release version 1.1" #create annotated tag
git tag                 #three ways to show a tag
git show v1.0
git tag -l "v1.*        #-l stands for --contains
git push origin v1.0
git push origin --tags  #push all tags at once
git push --tags
git tag -d v1.0         #delete tages if required
git tag --delete v1.0   #delete from local
git push origin -d v1.0 #three ways to delete from remote
git push origin --delete v1.0
git push origin :v1.0
git checkout -b [branchname] [tag]  #create a branch from a tag
git tag [tag] [reference of commit] #create a tag from past commit

#Enable git command auto completion
1. put git-completion.bash script to your home dir.
curl https://raw.githubusercontent.com/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
2. add following to .bash_profile. This tells .bash to run git-completions.bash if exists
vi ~/.bash_profile
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi

#Enable git color
1. check if colouring is already enabled
terminal - git config color.ui
2. enable colouring 
git config --global color.ui true
